#!python.exe
# coding=UTF-8

from math import sqrt, modf, isnan
from sys import argv
import sys
from PyQt4 import QtGui, QtCore
from PyQt4.QtCore import *
from PyQt4.QtGui import *

from man_help import *
from matrix import *
from cosinus import *
from exponential import *
from logarithm import *
from sinus import *

screen_size_x = 800
screen_size_y = 400

def errors_check(argv):
    if (len(argv) == 1):
        print("Error: Please put at least one argument")
        return (84)
    if (len(argv) == 2 and argv[1] == "-h"):
        man()
        exit(0)
    if (modf(sqrt(len(argv) - 2))[0] != 0):
        print("this matrix won't be a squared matrix")
        return (84)
    try:
        if (float(argv[1]) >= 0 or float(argv[1]) < 0):
            print("First argument has to be a string")
            return (84)
    except ValueError:
        check = "ok"
    i = 2
    while (i < len(argv)):
        try:
            isnan(float(argv[i]))
        except ValueError:
            print("Couldn't convert matrix args into float")
            return (84)
        i += 1
    return (sqrt(len(argv) - 2))

def retrieve_argument(argument):
    str = argument.split(' ')
    return (str)

def main(operation, argument_matrix, progress):
    
    arguments = retrieve_argument(argument_matrix)
    print("arguments parsed:", arguments)
    matrix_len = sqrt(len(arguments))
    matrix = create_matrix_with_str_arg(int(matrix_len), int(matrix_len), arguments)
    if (matrix == 84):
        return (84)
    calcs = [
        ["COS", cos_calculus(matrix, progress)],
        ["EXP", exp_calculus(matrix, progress)],
        ["SIN", sin_calculus(matrix, progress)],
        ["COSH", cosh_calculus(matrix, progress)],
        ["SINH", sinh_calculus(matrix, progress)],
        ["LOG1", log_1(matrix, progress)],
        ["LOG2", log_2(matrix, progress)]
    ]
    
    for i in range(len(calcs)):
        if (operation == calcs[i][0]):
            return(calcs[i][1])

operation = ['init']
argument_matrix = ['init']

try:
    _fromUtf8 = QtCore.QString.fromUtf8
except AttributeError:
    def _fromUtf8(s):
        return s
        
def help():
    help_msg = QMessageBox()
    help_msg.setIcon(QMessageBox.Information)
    help_msg.setText('USAGE\n\nClick on "Choose trigo calculus"\n\nClick on "Enter matrix in a string"\nexample: "2 3 4 5" is a matrix of size 2,2 with 2, 3, 4 and 5 in the matrix\n\nClick "Compute"')
    help_msg.setWindowTitle("Usage")
    help_msg.exec_()

def error_msg():
    msg = QMessageBox()
    msg.setIcon(QMessageBox.Warning)
    msg.setText("Please put arguments in input")
    msg.setWindowTitle("Error")
    msg.exec_()
    
def error_arguments():
    msg = QMessageBox()
    msg.setIcon(QMessageBox.Warning)
    msg.setText("Error: bad number of arguments")
    msg.setWindowTitle("Error")
    msg.exec_()

#GUI interface
class Window(QtGui.QWidget):
    def __init__(self, parent = None):
        QtGui.QWidget.__init__(self)
        layout = QtGui.QVBoxLayout(self)
        super(Window, self).__init__(parent)
        
        #title
        self.setWindowTitle("108trigo")

        #trigonometric calculus choice
        layout = QFormLayout()
        self.btn = QPushButton("Choose trigo calculus")
        self.btn.clicked.connect(self.get_operation)
        
        self.le = QLineEdit()
        layout.addRow(self.btn, self.le)

        #matrix input in a string
        self.btn1 = QPushButton("Enter matrix in a string")
        self.btn1.clicked.connect(self.get_argument)

        #help button
        self.help_btn = QPushButton("Help")
        self.help_btn.clicked.connect(self.help_button)
        
        self.le1 = QLineEdit()
        layout.addRow(self.btn1, self.le1)

        self.le2 = QLineEdit()
        self.setLayout(layout)
        layout.addRow(self.help_btn, self.le2)

        #compute button
        self.operate_btn = QPushButton("Compute")
        self.operate_btn.setDefault(True)
        self.operate_btn.clicked.connect(lambda: self.compute())
        layout.addWidget(self.operate_btn)
        
        self.matrix_viewer = QtGui.QWidget(self)
        self.matrix_viewer.setGeometry(QtCore.QRect(screen_size_x / 4, screen_size_y / 2.7, 561, 329))
        self.matrix_viewer.setObjectName(_fromUtf8("layoutWidget1"))

        #result layout
        self.view_matrix = QtGui.QTableWidget(self.matrix_viewer)
        self.view_matrix.setObjectName(_fromUtf8("Matrix Result"))
        layout.addWidget(self.view_matrix)

        self.progress = QtGui.QProgressBar(self)
        self.progress.setGeometry(13, 110, 120, 20)
    
    def help_button(self):
        help()
    
    def get_operation(self):
        items = ("COS", "EXP", "SIN", "COSH", "SINH", "LOG1", "LOG2")
        item, ok = QInputDialog.getItem(self, "Calculus input", "Choose trigo calculus", items, 0, False)
        if ok and item:
            self.le.setText(item)
        operation[0] = item

    def get_argument(self):
        text, ok = QInputDialog.getText(self, 'Matrix input', 'Enter arguments')
        if ok:
            self.le1.setText(str(text))
        argument_matrix[0] = text
    
    def compute(self):
        if (operation[0] != 'init' and argument_matrix[0] != 'init'):
            print("matrix arg:", argument_matrix)
            print("operation:", operation)
            matrix = main(operation[0], argument_matrix[0], self.progress)
            if (matrix == 84):
                error_arguments()
                return (84)
            self.view_matrix.setRowCount(len(matrix))
            self.view_matrix.setColumnCount(len(matrix[0]))
            for i, row in enumerate(matrix):
                for j, val in enumerate(row):
                    self.view_matrix.setItem(i, j, QtGui.QTableWidgetItem(str(precision(val))))
        else:
            error_msg()


def gui_interface():
    app = QtGui.QApplication(sys.argv)
    window = Window()
    window.resize(screen_size_x, screen_size_y)
    window.show()
    sys.exit(app.exec_())

gui_interface()
