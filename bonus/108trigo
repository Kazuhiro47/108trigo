#!/usr/bin/python3
# coding=UTF-8

from math import sqrt, modf, isnan
from sys import argv
import sys
from PyQt4 import QtGui, QtCore
from PyQt4.QtCore import *
from PyQt4.QtGui import *

from help.man_help import *
from matrix_fct.matrix import *
from src.cosinus import *
from src.exponential import *
from src.sinus import *
from src.normal_calc import *
from src.logarithm import *

screen_size_x = 540
screen_size_y = 480

def errors_check(argv):
	if (len(argv) == 1):
		exit(84)
	if (len(argv) == 2 and argv[1] == "-h"):
		man()
		exit(0)
	if (modf(sqrt(len(argv) - 2))[0] != 0):
		exit(84)
	try:
		if (float(argv[1]) >= 0 or float(argv[1]) < 0):
			exit(84)
	except ValueError:
		check = "ok"
	i = 2
	while (i < len(argv)):
		try:
			isnan(float(argv[i]))
		except ValueError:
			exit(84)
		i += 1
	return (sqrt(len(argv) - 2))

def retrieve_argument(argument):
	str = argument.split(' ')
	str = ''.join(str)
	return (str)

def main(operation, argument_matrix):

	matrix_len = errors_check(argv)
	arguments = retrieve_argument(argument_matrix)
	matrix = create_matrix_with_str_arg(int(matrix_len), int(matrix_len), arguments)
	calcs = [
		["COS", cos_calculus(matrix)],
		["EXP", exp_calculus(matrix)],
		["SIN", sin_calculus(matrix)],
		["COSH", cosh_calculus(matrix)],
		["SINH", sinh_calculus(matrix)],
		["INVERT1", inverted_fct_1(matrix)],
		["INVERT2", inverted_fct_2(matrix)],
		["LOG1", log_1(matrix)],
		["LOG2", log_2(matrix)]
	]

	for i in range(len(calcs)):
		if (argv[1] == calcs[i][0]):
			print_matrix(calcs[i][1])

operation = []
argument_matrix = []

try:
    _fromUtf8 = QtCore.QString.fromUtf8
except AttributeError:
    def _fromUtf8(s):
        return s

class Window(QtGui.QWidget):
	def __init__(self, parent = None):
		QtGui.QWidget.__init__(self)
		layout = QtGui.QVBoxLayout(self)
		super(Window, self).__init__(parent)

		#title
		self.setWindowTitle("108trigo")

		layout = QFormLayout()
		self.btn = QPushButton("Choose trigo calculus")
		self.btn.clicked.connect(self.get_operation)

		self.le = QLineEdit()
		layout.addRow(self.btn, self.le)
		self.btn1 = QPushButton("Enter matrix in a string")
		self.btn1.clicked.connect(self.get_argument)

		self.le1 = QLineEdit()
		layout.addRow(self.btn1, self.le1)
		self.btn2 = QPushButton("Enter an integer")
		self.btn2.clicked.connect(self.getint)

		self.le2 = QLineEdit()
		layout.addRow(self.btn2, self.le2)
		self.setLayout(layout)

		self.operate_btn = QPushButton("Compute")
		self.operate_btn.setDefault(True)
		self.operate_btn.clicked.connect(lambda: self.compute())
		layout.addWidget(self.operate_btn)

		self.layoutWidget1 = QtGui.QWidget(self)
		self.layoutWidget1.setGeometry(QtCore.QRect(screen_size_x / 3, screen_size_y / 3, 361, 229))
		self.layoutWidget1.setObjectName(_fromUtf8("layoutWidget1"))

		self.tableView = QtGui.QTableView(self.layoutWidget1)
		self.tableView.setObjectName(_fromUtf8("Matrix Result"))

	def get_operation(self):
		items = ("COS", "EXP", "SIN", "COSH", "SINH", "INVERT1", "INVERT2", "LOG1", "LOG2")
		item, ok = QInputDialog.getItem(self, "Calculus input", "Choose trigo calculus", items, 0, False)
		if ok and item:
			self.le.setText(item)
		argument_matrix.append(item)

	def get_argument(self):
		text, ok = QInputDialog.getText(self, 'Matrix input', 'Enter arguments')
		if ok:
			self.le1.setText(str(text))
		operation.append(text)


	def getint(self):
		num, ok = QInputDialog.getInt(self, "integer input dialog", "enter a number")
		if ok:
			self.le2.setText(str(num))
		return num

	def compute(self):
		print(operation)
		print(argument_matrix)
		main(operation[0], argument_matrix[0])

	def MostrarMem(self):
		self.tableView.setRowCount(len(matrix))
		self.tableView.setColumnCount(len(matrix[0]))
		for i, row in enumerate(matrix):
			for j, val in enumerate(row):
				self.tableView.setItem(i, j, QtGui.QTableWidgetItem(str(val)))

def interface():
	app = QtGui.QApplication(sys.argv)
	window = Window()
	window.resize(screen_size_x, screen_size_y)
	window.show()
	sys.exit(app.exec_())
#main(argv, matrix_len)
interface()
